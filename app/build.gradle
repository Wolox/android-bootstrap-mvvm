apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'jacoco'
apply from: '../jacoco.gradle'

android {
    compileSdk 31

    defaultConfig {
        applicationId "ar.com.wolox.android.bootstrap"
        minSdk 24
        targetSdk 31
        versionCode 1
        versionName "1.0"
        buildConfigField "String", "BASE_URL", "\"https://jsonplaceholder.typicode.com\""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file('keystore/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('keystore/release.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        dataBinding true
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
        unitTests.returnDefaultValues = true
    }
}

configurations {
    ktlint
}

jacoco {
    toolVersion = "0.8.7"
}

ext {
    androidx_core_version = '1.7.0'
    androidx_appcompat_version = '1.3.1'
    androidx_lifecycle_version = '2.2.0'
    androidx_lifecycle_extensions_version = '2.2.0'
    android_material_version = '1.4.0'
    coroutines_version = '1.4.3'
    junit_version = '4.13.2'
    retrofit_version = '2.9.0'
    okhttp_logger_version = '4.9.1'
    hilt_version = '2.38.1'
    gson_version = '2.8.9'
    fragment_ktx_version = '1.3.6'
    android_test_junit_version = '1.1.3'
    espresso_version = '3.4.0'
    leak_canary_version = '2.7'
    mockito_version = '4.0.0'
    arch_core_testing_version = '2.1.0'
    ktlint_version = '0.43.0'
}

dependencies {
    // Android base libraries
    implementation "androidx.core:core-ktx:$androidx_core_version"
    implementation "androidx.appcompat:appcompat:$androidx_appcompat_version"
    implementation "com.google.android.material:material:$android_material_version"

    // Network
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_logger_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.google.code.gson:gson:$gson_version"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$androidx_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$androidx_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$androidx_lifecycle_extensions_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$androidx_lifecycle_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_ktx_version"

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    // Testing
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockito_version"
    testImplementation("org.mockito:mockito-inline:$mockito_version")
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    testImplementation "androidx.arch.core:core-testing:$arch_core_testing_version"
    kaptTest "com.google.dagger:hilt-android-compiler:$hilt_version"
    androidTestImplementation "androidx.test.ext:junit:$android_test_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"

    // LeakCanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leak_canary_version"

    // Linter
    ktlint("com.pinterest:ktlint:$ktlint_version")
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // to add a baseline to check against prepend following args:
    // "--baseline=ktlint-baseline.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}
